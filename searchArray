/**
 * helpers.c
 *
 * Computer Science 50
 * Problem Set 3
 *
 * Helper functions for Problem Set 3.
 */
       
#include <cs50.h>
#include <stdio.h>

#include "helpers.h"

int binarySearch (int myKey, int myArray[], int min, int max);
int midpointCalc(int minVal, int maxVal); 

/**
 * Returns true if value is in array of n values, else false.
 */
bool search(int value, int values[], int n)
{
    
    if (n < 0)
    {
        
        return false; 
    }
    
    
    printf("Before array size"); 
    int minPosit = 0;
    int maxPosit = n; 
    
    printf("%i", minPosit); 
    printf("%i", maxPosit); 
    
    int searchValue = binarySearch(value, values, minPosit, maxPosit); 
    
    if (searchValue == value){
        
        return true;
    }
    return false;
}

/**
 * Sorts array of n values.
 */
void sort(int values[], int n)
{

    int swapCounter = -1; 
    
    if (swapCounter != 0)
    {
        swapCounter = 0; 
        
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                
                int val1 = values[i]; 
                int val2 = values[j]; 
                
                if (val1 > val2)
                {
                    
                    values[i] = val2; 
                    values[j] = val1; 
                    
                }
                
                 swapCounter++;
            }
            
        }
        
        
    }
    
    
    return;
}

int binarySearch (int myKey, int myArray[], int min, int max)
{
    
    int midpoint = midpointCalc(min, max); 
    
    if (myArray[midpoint] < myKey)
    {
        return binarySearch(myKey, myArray, midpoint + 1, max);
    }
    else if (myArray[midpoint] > myKey)
    {
        return binarySearch(myKey, myArray, min, midpoint - 1); 
    }
    else
    {
        return midpoint; 
    }
}

int midpointCalc(int minVal, int maxVal){
    
    int myMidpoint = (minVal + maxVal) / 2; 
    
    
    return myMidpoint; 
}
